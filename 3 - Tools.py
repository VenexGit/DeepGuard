# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QFileDialog
from PyQt5 import QtCore, QtGui, QtWidgets
import re
import os
import glob


   

class Ui_main(object):
    def setupUi(self, main,app):
        i = app.desktop().screenGeometry()
        h = i.height()
        w = i.width()

        
        def wn(t):
            return (t / 100) * w

        def hn(t):
            return (t / 100) * h




        
        mwd = wn(15)
        bwd = wn(65)
        btwd = wn(92)
        wd = w - wn(1)
        hg = h

        iw = wn(45)
        ih = hn(6)

        ft = 20
        ft2 = 15

        ib = wn(25)
        st = hn(10)

        sb = wn(3.5)

        def hjg(t,u):
            return st+(ih * t)+hn(u*(t-1))
        
        
        
        main.setObjectName("main")
        main.resize(900, 700)
        main.setMinimumSize(QtCore.QSize(wd, hg))
        main.setMaximumSize(QtCore.QSize(wd, wd))
        #main.setStyleSheet('position:absolute;left:0;width:100%;height:100%;')
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        main.setFont(font)
        
        self.tab = QtWidgets.QTabWidget(main)
        self.tab.setGeometry(QtCore.QRect(0, 0, wd, hg))
        self.tab.setObjectName("tab")
        self.lines = QtWidgets.QWidget()
        self.lines.setObjectName("MerSplite")
        self.tab2 = QtWidgets.QTabWidget(self.lines)
        self.tab2.setGeometry(QtCore.QRect(0, 0, wd, hg))
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        font.setBold(False)
        font.setWeight(50)
        self.tab2.setFont(font)
        self.tab2.setObjectName("tab2")
        self.repeat = QtWidgets.QWidget()
        self.repeat.setObjectName("repeat")
        self.r1 = QtWidgets.QLineEdit(self.repeat)
        self.r1.setGeometry(QtCore.QRect(mwd, hjg(1,0), iw, ih))
        self.r1.setStyleSheet(f'font-size:{ft}px;')
        self.r1.setAlignment(QtCore.Qt.AlignCenter)
        self.r1.setObjectName("r1")
        self.r2 = QtWidgets.QLineEdit(self.repeat)
        self.r2.setGeometry(QtCore.QRect(mwd, hjg(2,2), iw, ih))
        self.r2.setAlignment(QtCore.Qt.AlignCenter)
        self.r2.setStyleSheet(f'font-size:{ft}px;')
        self.r2.setObjectName("r2")
        self.rb1 = QtWidgets.QPushButton(self.repeat)
        self.rb1.setGeometry(QtCore.QRect(sb, hjg(3,4), btwd, ih))
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        self.rb1.setFont(font)
        self.rb1.setStyleSheet("background:rgb(64, 184, 140);\n"
"")
        self.rb1.setObjectName("rb1")
        self.rw2 = QtWidgets.QPushButton(self.repeat)
        self.rw2.setGeometry(QtCore.QRect(bwd, hjg(2,2), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.rw2.setFont(font)
        self.rw2.setStyleSheet("background:rgb(78, 134, 255);\n"
"color: white;")
        self.rw2.setObjectName("rw2")
        self.rw1 = QtWidgets.QPushButton(self.repeat)
        self.rw1.setGeometry(QtCore.QRect(bwd, hjg(1,0), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.rw1.setFont(font)
        self.rw1.setStyleSheet("background: rgb(83, 83, 83);\n"
"color: white;")
        self.rw1.setObjectName("rw1")
        
        


        # Remove
        
        self.num = QtWidgets.QWidget()
        self.num.setObjectName("num")
        self.nb1 = QtWidgets.QPushButton('remove',self.num)
        
        self.nb1.setGeometry(QtCore.QRect(sb, hjg(4,3), btwd, ih))
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        self.nb1.setFont(font)
        self.nb1.setStyleSheet("background:rgb(64, 184, 140);\n"
"")
        self.nb1.setObjectName("rpb1")
        self.n1 = QtWidgets.QLineEdit(self.num)
        self.n1.setGeometry(QtCore.QRect(mwd, hjg(1,0), iw, ih))
        self.n1.setStyleSheet(f'font-size:{ft}px;')
        self.n1.setAlignment(QtCore.Qt.AlignCenter)
        self.n1.setObjectName("rp1")
    
        self.n2 = QtWidgets.QLineEdit(self.num)
        self.n2.setGeometry(QtCore.QRect(mwd, hjg(2,2), iw, ih))
        self.n2.setStyleSheet(f'font-size:{ft}px;')
        self.n2.setAlignment(QtCore.Qt.AlignCenter)
        self.n2.setObjectName("rp2")
        self.cm = QComboBox(self.num)
        self.cm.setGeometry(mwd, hjg(3,2), iw, ih)
        
        self.cm.addItem('Filter WhiteList')
        self.cm.addItem('Domain Extract')
        self.nw1 = QtWidgets.QPushButton('Browse',self.num)
        self.nw1.setGeometry(QtCore.QRect(bwd, hjg(1,0), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.nw1.setFont(font)
        self.nw1.setStyleSheet("background: rgb(83, 83, 83);\n"
"color: white;")
        self.nw1.setObjectName("rpw1")
        self.nw2 = QtWidgets.QPushButton('Browse',self.num)
        self.nw2.setGeometry(QtCore.QRect(bwd, hjg(2,2), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.nw2.setFont(font)
        self.nw2.setStyleSheet("background:rgb(78, 134, 255);\n"
"color: white;")
        self.nw2.setObjectName("rpw2")

        self.n1.setPlaceholderText("Folder To ...")
        self.n2.setPlaceholderText("Output Folder")

        self.n1.setText('1 - Input Folder')
        self.n2.setText('2 - Output Folder')
        
        # Merge
        
        self.mer = QtWidgets.QWidget()
        self.mer.setObjectName("mer")
        self.mb1 = QtWidgets.QPushButton('Merge',self.mer)
        
        self.mb1.setGeometry(QtCore.QRect(sb, hjg(3,4), btwd, ih))
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        self.mb1.setFont(font)
        self.mb1.setStyleSheet("background:rgb(64, 184, 140);\n"
"")
        self.mb1.setObjectName("rpb1")
        self.m1 = QtWidgets.QLineEdit(self.mer)
        self.m1.setGeometry(QtCore.QRect(mwd, hjg(1,0), iw, ih))
        self.m1.setStyleSheet(f'font-size:{ft}px;')
        self.m1.setAlignment(QtCore.Qt.AlignCenter)
        self.m1.setObjectName("rp1")
    
        self.m2 = QtWidgets.QLineEdit(self.mer)
        self.m2.setGeometry(QtCore.QRect(mwd, hjg(2,2), iw, ih))
        self.m2.setStyleSheet(f'font-size:{ft}px;')
        self.m2.setAlignment(QtCore.Qt.AlignCenter)
        self.m2.setObjectName("rp2")
        
        
        self.mw1 = QtWidgets.QPushButton('Browse',self.mer)
        self.mw1.setGeometry(QtCore.QRect(bwd, hjg(1,0), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.mw1.setFont(font)
        self.mw1.setStyleSheet("background: rgb(83, 83, 83);\n"
"color: white;")
        self.mw1.setObjectName("rpw1")
        self.mw2 = QtWidgets.QPushButton('Browse',self.mer)
        self.mw2.setGeometry(QtCore.QRect(bwd, hjg(2,2), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.mw2.setFont(font)
        self.mw2.setStyleSheet("background:rgb(78, 134, 255);\n"
"color: white;")
        self.mw2.setObjectName("rpw2")
        

        self.m1.setPlaceholderText("Input Folder")
        self.m2.setPlaceholderText("Output Folder")
        

        
        
        self.text = QtWidgets.QWidget()
        self.text.setObjectName("text")
        self.tab3 = QtWidgets.QTabWidget(self.text)
        self.tab3.setGeometry(QtCore.QRect(0, 0, wd, hg))
        self.tab3.setObjectName("tab3")
        self.replace = QtWidgets.QWidget()
        self.replace.setObjectName("replace")
        self.rpb1 = QtWidgets.QPushButton(self.replace)
        
        self.rpb1.setGeometry(QtCore.QRect(sb, hjg(5,3), btwd, ih))
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        self.rpb1.setFont(font)
        self.rpb1.setStyleSheet("background:rgb(64, 184, 140);\n"
"")
        self.rpb1.setObjectName("rpb1")
        self.rp1 = QtWidgets.QLineEdit(self.replace)
        self.rp1.setGeometry(QtCore.QRect(mwd, hjg(1,0), iw, ih))
        self.rp1.setStyleSheet(f'font-size:{ft}px;')
        self.rp1.setAlignment(QtCore.Qt.AlignCenter)
        self.rp1.setObjectName("rp1")
        self.rp4 = QtWidgets.QLineEdit(self.replace)
        self.rp4.setGeometry(QtCore.QRect(mwd, hjg(4,2), iw, ih))
        self.rp4.setAlignment(QtCore.Qt.AlignCenter)
        self.rp4.setObjectName("rp4")
        self.rp4.setStyleSheet(f'font-size:{ft}px;')
        self.rp2 = QtWidgets.QLineEdit(self.replace)
        self.rp2.setGeometry(QtCore.QRect(mwd, hjg(2,2), iw, ih))
        self.rp2.setStyleSheet(f'font-size:{ft}px;')
        self.rp2.setAlignment(QtCore.Qt.AlignCenter)
        self.rp2.setObjectName("rp2")
        self.rp3 = QtWidgets.QLineEdit(self.replace)
        self.rp3.setGeometry(QtCore.QRect(mwd, hjg(3,2), iw, ih))
        self.rp3.setAlignment(QtCore.Qt.AlignCenter)
        self.rp3.setStyleSheet(f'font-size:{ft}px;')
        self.rp3.setObjectName("rp3")
        self.rpw1 = QtWidgets.QPushButton(self.replace)
        self.rpw1.setGeometry(QtCore.QRect(bwd, hjg(1,0), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.rpw1.setFont(font)
        self.rpw1.setStyleSheet("background: rgb(83, 83, 83);\n"
"color: white;")
        self.rpw1.setObjectName("rpw1")
        self.rpw2 = QtWidgets.QPushButton(self.replace)
        self.rpw2.setGeometry(QtCore.QRect(bwd, hjg(2,2), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.rpw2.setFont(font)
        self.rpw2.setStyleSheet("background:rgb(78, 134, 255);\n"
"color: white;")
        self.rpw2.setObjectName("rpw2")
        
        self.delete_2 = QtWidgets.QWidget()
        self.delete_2.setObjectName("delete_2")
        self.d1 = QtWidgets.QLineEdit(self.delete_2)
        self.d1.setGeometry(QtCore.QRect(mwd, hjg(1,0), iw, ih))
        self.d1.setAlignment(QtCore.Qt.AlignCenter)
        self.d1.setStyleSheet(f'font-size:{ft}px;')
        self.d1.setObjectName("d1")
        self.d2 = QtWidgets.QLineEdit(self.delete_2)
        self.d2.setGeometry(QtCore.QRect(mwd, hjg(2,2), iw, ih))
        self.d2.setStyleSheet(f'font-size:{ft}px;')
        self.d2.setAlignment(QtCore.Qt.AlignCenter)
        self.d2.setObjectName("d2")
        self.d3 = QtWidgets.QLineEdit(self.delete_2)
        self.d3.setGeometry(QtCore.QRect(mwd, hjg(3,2), iw, ih))
        self.d3.setAlignment(QtCore.Qt.AlignCenter)
        self.d3.setStyleSheet(f'font-size:{ft}px;')
        self.d3.setObjectName("d3")
        self.cmd = QComboBox(self.delete_2)
        self.cmd.setGeometry(mwd, hjg(4,2), iw, ih)
        self.cmd.addItem('Delete Line')
        self.cmd.addItem('Delete Just')
        self.cmd.addItem('Delete After')
        
        self.db1 = QtWidgets.QPushButton(self.delete_2)
        self.db1.setGeometry(QtCore.QRect(sb, hjg(5,3), btwd, ih))
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        self.db1.setFont(font)
        self.db1.setStyleSheet("background:rgb(64, 184, 140);\n"
"")
        self.db1.setObjectName("db1")
        self.dw2 = QtWidgets.QPushButton(self.delete_2)
        self.dw2.setGeometry(QtCore.QRect(bwd, hjg(2,2), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.dw2.setFont(font)
        self.dw2.setStyleSheet("background:rgb(78, 134, 255);\n"
"color: white;")
        self.dw2.setObjectName("dw2")
        self.dw1 = QtWidgets.QPushButton(self.delete_2)
        self.dw1.setGeometry(QtCore.QRect(bwd, hjg(1,0), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.dw1.setFont(font)
        self.dw1.setStyleSheet("background: rgb(83, 83, 83);\n"
"color: white;")
        self.dw1.setObjectName("dw1")
        
        
        # Add
        
        self.add = QtWidgets.QWidget()
        self.add.setObjectName("add")
        self.ab1 = QtWidgets.QPushButton('Add',self.add)
        
        self.ab1.setGeometry(QtCore.QRect(sb, hjg(5,3), btwd, ih))
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        self.ab1.setFont(font)
        self.ab1.setStyleSheet("background:rgb(64, 184, 140);\n"
"")
        self.ab1.setObjectName("rpb1")
        self.a1 = QtWidgets.QLineEdit(self.add)
        self.a1.setGeometry(QtCore.QRect(mwd, hjg(1,0), iw, ih))
        self.a1.setStyleSheet(f'font-size:{ft}px;')
        self.a1.setAlignment(QtCore.Qt.AlignCenter)
        self.a1.setObjectName("rp1")
        self.a4 = QtWidgets.QLineEdit(self.add)
        self.a4.setGeometry(QtCore.QRect(mwd, hjg(4,2), iw, ih))
        self.a4.setStyleSheet(f'font-size:{ft}px;')
        self.a4.setAlignment(QtCore.Qt.AlignCenter)
        self.a4.setObjectName("rp4")
        self.a2 = QtWidgets.QLineEdit(self.add)
        self.a2.setGeometry(QtCore.QRect(mwd, hjg(2,2), iw, ih))
        self.a2.setStyleSheet(f'font-size:{ft}px;')
        self.a2.setAlignment(QtCore.Qt.AlignCenter)
        self.a2.setObjectName("rp2")
        self.a3 = QtWidgets.QLineEdit(self.add)
        self.a3.setGeometry(QtCore.QRect(mwd, hjg(3,2), iw, ih))
        self.a3.setAlignment(QtCore.Qt.AlignCenter)
        self.a3.setObjectName("rp3")
        self.a3.setStyleSheet(f'font-size:{ft}px;')
        self.aw1 = QtWidgets.QPushButton('Browse',self.add)
        self.aw1.setGeometry(QtCore.QRect(bwd, hjg(1,0), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.aw1.setFont(font)
        self.aw1.setStyleSheet("background: rgb(83, 83, 83);\n"
"color: white;")
        self.aw1.setObjectName("rpw1")
        self.aw2 = QtWidgets.QPushButton('Browse',self.add)
        self.aw2.setGeometry(QtCore.QRect(bwd, hjg(2,2), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.aw2.setFont(font)
        self.aw2.setStyleSheet("background:rgb(78, 134, 255);\n"
"color: white;")
        self.aw2.setObjectName("rpw2")
        

        self.a1.setPlaceholderText("Folder To Add")
        self.a2.setPlaceholderText("Output Folder")
        self.a3.setPlaceholderText("Text")
        self.a4.setPlaceholderText("Index")


        # Split
        
        self.spl = QtWidgets.QWidget()
        self.spl.setObjectName("mer")        
        self.spb1 = QtWidgets.QPushButton('Split',self.spl)        
        self.spb1.setGeometry(QtCore.QRect(sb, hjg(4,3), btwd, ih))
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        self.spb1.setFont(font)
        self.spb1.setStyleSheet("background:rgb(64, 184, 140);\n"
"")
        self.spb1.setObjectName("rpb1")
        self.sp1 = QtWidgets.QLineEdit(self.spl)
        self.sp1.setGeometry(QtCore.QRect(mwd, hjg(1,0), iw, ih))
        self.sp1.setStyleSheet(f'font-size:{ft}px;')
        self.sp1.setAlignment(QtCore.Qt.AlignCenter)
        self.sp1.setObjectName("rp1")
    
        self.sp2 = QtWidgets.QLineEdit(self.spl)
        self.sp2.setGeometry(QtCore.QRect(mwd, hjg(2,2), iw, ih))
        self.sp2.setStyleSheet(f'font-size:{ft}px;')
        self.sp2.setAlignment(QtCore.Qt.AlignCenter)
        self.sp2.setObjectName("rp2")
        self.sp3 = QtWidgets.QLineEdit(self.spl)
        self.sp3.setGeometry(QtCore.QRect(mwd, hjg(3,2), iw, ih))
        self.sp3.setAlignment(QtCore.Qt.AlignCenter)
        self.sp3.setObjectName("rp3")
        self.sp3.setStyleSheet(f'font-size:{ft}px;')
        
        self.spw1 = QtWidgets.QPushButton('Browse',self.spl)
        self.spw1.setGeometry(QtCore.QRect(bwd, hjg(1,0), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.spw1.setFont(font)
        self.spw1.setStyleSheet("background: rgb(83, 83, 83);\n"
"color: white;")
        self.spw1.setObjectName("rpw1")
        self.spw2 = QtWidgets.QPushButton('Browse',self.spl)
        self.spw2.setGeometry(QtCore.QRect(bwd, hjg(2,2), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.spw2.setFont(font)
        self.spw2.setStyleSheet("background:rgb(78, 134, 255);\n"
"color: white;")
        self.spw2.setObjectName("rpw2")

        
        
        
        
        self.sp1.setPlaceholderText("Text File To Split")
        self.sp2.setPlaceholderText("Output Folder")
        self.sp3.setPlaceholderText("Number Lines ")

        # tab 3

        self.mul = QtWidgets.QWidget()
        self.mul.setObjectName("mul")

        self.tbm = QtWidgets.QTabWidget(self.mul)
        self.tbm.setGeometry(QtCore.QRect(0, 0, wd, hg))
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        font.setBold(False)
        font.setWeight(50)
        self.tbm.setFont(font)
        self.tbm.setObjectName("tab2")

        self.srt = QtWidgets.QWidget()
        self.srt.setObjectName("num")
        self.sb1 = QtWidgets.QPushButton('sorted',self.srt)
        
        self.sb1.setGeometry(QtCore.QRect(sb, hjg(4,3), btwd, ih))
        font = QtGui.QFont()
        font.setFamily("DINOT")
        font.setPointSize(ft)
        self.sb1.setFont(font)
        self.sb1.setStyleSheet("background:rgb(64, 184, 140);\n"
"")
        self.sb1.setObjectName("rpb1")
        self.s1 = QtWidgets.QLineEdit(self.srt)
        self.s1.setGeometry(QtCore.QRect(mwd, hjg(1,0), iw, ih))
        self.s1.setStyleSheet(f'font-size:{ft}px;')
        self.s1.setAlignment(QtCore.Qt.AlignCenter)
        self.s1.setObjectName("rp1")
    
        self.s2 = QtWidgets.QLineEdit(self.srt)
        self.s2.setGeometry(QtCore.QRect(mwd, hjg(2,2), iw, ih))
        self.s2.setStyleSheet(f'font-size:{ft}px;')
        self.s2.setAlignment(QtCore.Qt.AlignCenter)
        self.s2.setObjectName("rp2")
        self.scm = QComboBox(self.srt)
        self.scm.setGeometry(mwd, hjg(3,2), iw, ih)
        
        self.scm.addItem('Normal')
      #  self.scm.addItem('Reverse')
        self.scm.addItem('Len Small')
        self.scm.addItem('Len Big')
        self.sw1 = QtWidgets.QPushButton('Browse',self.srt)
        self.sw1.setGeometry(QtCore.QRect(bwd, hjg(1,0), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.sw1.setFont(font)
        self.sw1.setStyleSheet("background: rgb(83, 83, 83);\n"
"color: white;")
        self.sw1.setObjectName("rpw1")
        self.sw2 = QtWidgets.QPushButton('Browse',self.srt)
        self.sw2.setGeometry(QtCore.QRect(bwd, hjg(2,2), ib, ih))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(ft2)
        self.sw2.setFont(font)
        self.sw2.setStyleSheet("background:rgb(78, 134, 255);\n"
"color: white;")
        self.sw2.setObjectName("rpw2")

        self.s1.setPlaceholderText("Folder To ...")
        self.s2.setPlaceholderText("Output Folder")

        self.s1.setText('1 - Input Folder')
        self.s2.setText('2 - Output Folder')

        
        
        # Add text Tab

        self.n2.setText('2 - Output Folder')
        self.r2.setText('2 - Output Folder')
        self.a2.setText('2 - Output Folder')
        self.m2.setText('2 - Output Folder')
        self.sp2.setText('2 - Output Folder')
        self.rp2.setText('2 - Output Folder')
        self.d2.setText('2 - Output Folder')
        self.m1.setText('1 - Input Folder')

        
        # Add Widget Tab
        self.tab.addTab(self.text, "")
        self.tab.addTab(self.lines, "")
        #self.tab.addTab(self.mul, "")
        
        self.tab3.addTab(self.repeat, "Repeat")
        self.tab2.addTab(self.spl, "Split") 
        self.tab2.addTab(self.mer, "Merge")
        self.tab2.addTab(self.num, "Remove N")
        self.tab3.addTab(self.replace, "Replace")
        self.tab3.addTab(self.delete_2, "Delete")
        self.tab3.addTab(self.add, "Add")

        self.tab3.addTab(self.srt, "Sort")

        # Functions

        def msgwar(text):
           QMessageBox.warning(main,'Error',f'{text}')

        def msgbox(text):
           QMessageBox.about(main,'Info',f'{text}')

        
    
        def repeat():
            ch = 'true'
            

            if self.r1.text() == '':
                ch = 'false'
                msgwar('File1 is Empty ')

            elif self.r2.text() == '':
                ch = 'false'
                msgwar('File2 is Empty ')

            elif ch == 'true':
                files = glob.glob(f'{self.r1.text()}/*')
                c = 1
                for file in files:
                    
                    w = open(f'{file}','r')
                    o = file.find('.')
                    w2 = open(f'{self.r2.text()}/{c}{file[o:]}','w')
                    
                    s = sorted(set(w.readlines()))
                    for i in s:
                        print(i)
                        if len(i.strip('\n')) > 5 and i.strip('\n').find('.') != -1 :
                            if re.search('[a-zA-A]+',i):
                                w2.write(''.join(i.split(' ')).lower())

                    print(c)
                    c+=1

        
                    w.close()
                    w2.close()

                msgbox('File Is Remove Duplite')


        def sort():
            ch = 'true'
            if self.s1.text() == '':
                ch = 'false'
                msgwar('File1 is Empty ')

            elif self.s2.text() == '':
                ch = 'false'
                msgwar('File2 is Empty ')

            elif ch == 'true':              
                w = open(f'{self.s1.text()}','r')
                o = self.s1.text().find('.')
                w2 = open(f'{self.s2.text()}/update{self.s1.text()[o:]}','w')
                

                for i in sorted(w.readlines()):
                    w2.write(i)

        
                w.close()
                w2.close()

                msgbox('File Is Sorted')
            

        def replace():
            ch = 'true'
            if self.rp1.text() == '':
                ch = 'false'
                msgwar('File1 is Empty ')

            elif self.rp2.text() == '':
                ch = 'false'
                msgwar('File2 is Empty ')

            elif ch == 'true':
                files = glob.glob(f'{self.rp1.text()}/*')
                c = 1
                for file in files:
                    
                    w = open(f'{file}','r')
                    o = file.find('.')
                    w2 = open(f'{self.rp2.text()}/{c}{file[o:]}','w')
                    for i in w:
                        w2.write(i.replace(f'{self.rp3.text()}',f'{self.rp4.text()}'))
                    c+=1
            
                    w.close()
                    w2.close()

                msgbox('Text Is Replaced')

        def delete():
            ch = 'true'
            if self.d1.text() == '':
                ch = 'false'
                msgwar('File1 is Empty ')

            elif self.d2.text() == '':
                ch = 'false'
                msgwar('File2 is Empty ')

            elif ch == 'true':
                files = glob.glob(f'{self.d1.text()}/*')
                c = 1
                for file in files:
                    w = open(f'{file}','r')
                    o = file.find('.')
                    
                    w2 = open(f'{self.d2.text()}/{c}{file[o:]}','w')
                    l = open('Delete List.txt','r')
                    for i in w:
                        
                        if self.cmd.currentText() == 'Delete Line':
                            for x in l:
                                t = i.find(x)
                                if t == -1:
                                    w2.write(i)
                                    break
                        elif self.cmd.currentText() == 'Delete Just':
                            

                            for x in l:
                                i = i.replace(x, '')

                            w2.write(i)
                            
                                

                        elif self.cmd.currentText() == 'Delete After':
                            for x in l:
                                t = i.find(x)
                                w2.write(i[:t] + '\n' )
                            
                            
                                
                    print(c)
                    c+=1
            
                    w.close()
                    w2.close()

                msgbox(f'Text Is Deleted {self.d3.text()}')

        def add():
            
            ch = 'true'
            if self.a1.text() == '':
                ch = 'false'
                msgwar('File1 is Empty ')

            elif self.a2.text() == '':
                ch = 'false'
                msgwar('File2 is Empty ')

            elif self.a3.text() == '':
                ch = 'false'
                msgwar('Text is Empty ')

            elif self.a4.text() == '':
                ch = 'false'
                msgwar('Index is Empty ')

           

            elif ch == 'true':
                files = glob.glob(f'{self.a1.text()}/*')
                c = 1
                for file in files:
                    w = open(f'{file}','r')
                    o = file.find('.')
                    
                    w2 = open(f'{self.a2.text()}/{c}{file[o:]}','w')
                    v = self.a4.text()
                   
                    for i in w:
                        w2.write(i[0:int(v)] + self.a3.text() + i[int(v):])

                    print(c)
                    c+=1
            
                    w.close()
                    w2.close()

                msgbox(f'Text Is Add ')

            
        def num():
            ch = 'true'
            if self.n1.text() == '':
                ch = 'false'
                return msgwar('File1 is Empty ')

            elif self.n2.text() == '':
                ch = 'false'
                return msgwar('File2 is Empty ')

                      

            elif ch == 'true':
                    
                    if self.cm.currentText() == 'Filter WhiteList':
                        file2 = open(f"4 - White List.txt", "r")
                        files = glob.glob(f'{self.n1.text()}/*.txt')

                        c = 0
                        for i in files:
                            c+=1
                            file1 = open(f'{i}', "r")
                            

                            set1 = set()
                            set2 = set()
                            for line in file1:
                                set1.add(line.strip())
                            for line in file2:
                                set2.add(line.strip())

                            fl = open(f'{self.n2.text()}/{c}.txt','w')
                            g = set1.difference(set2)

                            for word in g:
                                fl.write(word + '\n')
                            fl.close()
                            print(f'File : {c}')

                    elif self.cm.currentText() == 'Domain Extract':
                        file2 = open(f"5 - Tld.txt", "r")
                        s = file2.readlines()

                        regex = "(([\w_-]+(?:(?:\.[\w]+)+)))"
                        l = ['127.0.0.1 ','0.0.0.0 ','!','"','#','$','%','&',"'",'(',')','*','+',',','-','/',':',';','<','=','>','?','@','[',"\\",']',"^",'_','`','{','|','}','~']

                        files = glob.glob(f'{self.n1.text()}/*.txt')

                        c = 0
                        files = sorted(files)
                        for file in files:
                             c+=1
                             try:
                                  w = open(f'{file}','r',encoding='utf-8')
                                  
                                  w2 = open(f'{self.n2.text()}/{c}.txt','w')

                                  
                                  for i in w:
                                       for u in l:
                                          i = i.replace(u,'')
                                      
                                       if re.search(regex,i):
                                          i = re.search(regex,i)[0] 
                                          i = i.strip('\n')
                                          ext = '.' + i.split('.')[-1]

                                          for x in s:
                                              if x.strip('\n') == ext:
                                                  w2.write(i + '\n')
                                                  break
                                  w.close()
                                  w2.close()
                                  
                                       
                                  print(f'file Number : {c}')
                                  

                                  #os.unlink(file)

                             except UnicodeEncodeError as e:
                                print('error : ',c)

                        
                                 
            
                    

                    return msgbox(f'Successful')
                
                    

        def mer():
            ch = 'true'
            if self.m1.text() == '':
                ch = 'false'
                msgwar('File1 is Empty ')

            elif self.m2.text() == '':
                ch = 'false'
                msgwar('File2 is Empty ')

            elif ch == 'true':
                
                w2 = open(f'{self.m2.text()}/update.txt','w')
                
               
                print(f'{self.m1.text()}/*.txt')
                g = glob.glob(f'{self.m1.text()}/*.txt')
                g = sorted(g)
                for i in g:
                    
                    w = open(f'{i}','r')
                    s = set(w)
                    for x in s:
                        
                        w2.write(x)
                    
                    w.close()
                

                w2.close()
            return msgbox(f'Successful')

        def spl():
            ch = 'true'
            if self.sp1.text() == '':
                ch = 'false'
                msgwar('File1 is Empty ')

            elif self.sp2.text() == '':
                ch = 'false'
                msgwar('File2 is Empty ')

            elif ch == 'true':
                lines_per_file = int(self.sp3.text())
                
                smallfile = None
                with open(f'{self.sp1.text()}') as bigfile:
                    s = set(bigfile)
                    for lineno, line in enumerate(s):
                        
                        if lineno % lines_per_file == 0:
                            if smallfile:
                                smallfile.close()
                            
                            smallfile = open(f'{self.sp2.text()}/Pack - {lineno + lines_per_file}.txt', "w")
                            
                        smallfile.write(line)
                    if smallfile:
                        smallfile.close()
                msgbox(f'Successful')

        def srt():
            ch = 'true'
            if self.s1.text() == '':
                ch = 'false'
                return msgwar('input is Empty ')

            elif self.s2.text() == '':
                ch = 'false'
                return msgwar('output is Empty ')

                      

            elif ch == 'true':
                    files = glob.glob(f'{self.s1.text()}/*')
                    c = 1
                    
                    if self.scm.currentText() == 'Normal':
                        
                        for i in files:
                            
                            file1 = open(f'{i}', "r")

                            o = i.find('.')
                            file2 = open(f'{self.s2.text()}/{c}{i[o:]}', "w")
                            g = sorted(file1)
                            
                            file2.writelines(g)
                                
                                
                            file1.close()
                            file2.close()
                            print(f'File : {c}')

                            c+=1

                    elif self.scm.currentText() == 'Reverse':
                        for i in files:
                            
                            file1 = open(f'{i}', "r")

                            o = i.find('.')
                            file2 = open(f'{self.s2.text()}/{c}{i[o:]}', "w")
                            

                            
                            file2.writelines(sorted(file1, reverse=True))
                                
                                
                            file1.close()
                            file2.close()
                            print(f'File : {c}')

                            c+=1

                            
                    elif self.scm.currentText() == 'Len Small':
                        for i in files:
                            
                            file1 = open(f'{i}', "r")

                            o = i.find('.')
                            file2 = open(f'{self.s2.text()}/{c}{i[o:]}', "w")
                            

                            
                            file2.writelines(sorted(file1, key=len))
                                
                                
                            file1.close()
                            file2.close()
                            print(f'File : {c}')

                            c+=1

                    elif self.scm.currentText() == 'Len Big':
                        for i in files:
                            
                            file1 = open(f'{i}', "r")

                            o = i.find('.')
                            file2 = open(f'{self.s2.text()}/{c}{i[o:]}', "w")
                            

                            
                            file2.writelines(sorted(file1, key=len,reverse=True))
                                
                                
                            file1.close()
                            file2.close()
                            print(f'File : {c}')

                            c+=1
                        
                                 
            
                    

                    return msgbox(f'Successful')
            
                        

    
        self.rb1.clicked.connect(repeat)
        
        self.rpb1.clicked.connect(replace)
        self.db1.clicked.connect(delete)
        self.ab1.clicked.connect(add)
        self.nb1.clicked.connect(num)
        self.mb1.clicked.connect(mer)
        self.spb1.clicked.connect(spl)
        self.sb1.clicked.connect(srt)


        # Browse
        

        self.rw1.clicked.connect(lambda:self.browse2(main,self.r1))
        self.rw2.clicked.connect(lambda:self.browse2(main,self.r2))

        

        self.rpw1.clicked.connect(lambda:self.browse2(main,self.rp1))
        self.rpw2.clicked.connect(lambda:self.browse2(main,self.rp2))

        self.dw1.clicked.connect(lambda:self.browse2(main,self.d1))
        self.dw2.clicked.connect(lambda:self.browse2(main,self.d2))

        self.aw1.clicked.connect(lambda:self.browse2(main,self.a1))
        self.aw2.clicked.connect(lambda:self.browse2(main,self.a2))

        self.nw1.clicked.connect(lambda:self.browse2(main,self.n1))
        self.nw2.clicked.connect(lambda:self.browse2(main,self.n2))

        self.mw1.clicked.connect(lambda:self.browse2(main,self.m1))
        self.mw2.clicked.connect(lambda:self.browse2(main,self.m2))

        self.spw1.clicked.connect(lambda:self.browse(main,self.sp1))
        self.spw2.clicked.connect(lambda:self.browse2(main,self.sp2))

        self.sw1.clicked.connect(lambda:self.browse2(main,self.s1))
        self.sw2.clicked.connect(lambda:self.browse2(main,self.s2))


        # ReadOnly

        self.r1.setReadOnly(True)
        self.r2.setReadOnly(True)
        
        self.rp1.setReadOnly(True)
        self.rp2.setReadOnly(True)
        
        self.d1.setReadOnly(True)
        self.d2.setReadOnly(True)

        self.a1.setReadOnly(True)
        self.a2.setReadOnly(True)

        self.n1.setReadOnly(True)
        self.n2.setReadOnly(True)

        self.m1.setReadOnly(True)
        self.m2.setReadOnly(True)

        self.sp1.setReadOnly(True)
        self.sp2.setReadOnly(True)

        # Tab 

        def slt(n):
            self.tab.setCurrentIndex(n)


        

        self.retranslateUi(main)
        self.tab.setCurrentIndex(0)
        self.tab2.setCurrentIndex(0)
        self.tab3.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(main)

        

    # Browser

    def browse(self,main,l):
        name = QFileDialog.getOpenFileName(main, 'Open File', r'Desktop')
        l.setText(name[0])

    def browse2(self,main,l):
        name = QFileDialog.getExistingDirectory(main, 'Browse For Folder', f'{6}')
        l.setText(name )

    def retranslateUi(self, main):
        _translate = QtCore.QCoreApplication.translate
        main.setWindowTitle(_translate("main", "Form"))
        
        self.r1.setPlaceholderText(_translate("main", "Folder To Repeat"))
        self.r2.setPlaceholderText(_translate("main", "Output Folder"))
        self.rb1.setText(_translate("main", "Remove Duplite"))
        self.rw2.setText(_translate("main", "Browse"))
        self.rw1.setText(_translate("main", "Browse"))
        
        
        self.tab.setTabText(self.tab.indexOf(self.lines), _translate("main", "Lines Tools"))
        self.rpb1.setText(_translate("main", "Replace"))
        self.rp1.setPlaceholderText(_translate("main", "Folder To Replace"))
        self.rp4.setPlaceholderText(_translate("main", "Replace With "))
        self.rp2.setPlaceholderText(_translate("main", "Output Folder"))
        self.rp3.setPlaceholderText(_translate("main", "Find What"))
        self.rpw1.setText(_translate("main", "Browse"))
        self.rpw2.setText(_translate("main", "Browse"))
        
        self.d1.setPlaceholderText(_translate("main", "Folder To Delete"))
        self.d2.setPlaceholderText(_translate("main", "Output Folder"))
        self.d3.setPlaceholderText(_translate("main", "Delete What"))
        self.db1.setText(_translate("main", "Delete"))
        self.dw2.setText(_translate("main", "Browse"))
        self.dw1.setText(_translate("main", "Browse"))
        
        self.tab.setTabText(self.tab.indexOf(self.text), _translate("main", "Text Tools"))
        self.tab.setTabText(self.tab.indexOf(self.mul), _translate("main", "Multi Tools"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    main = QtWidgets.QWidget()
    ui = Ui_main()
    ui.setupUi(main,app)
    main.show()
    sys.exit(app.exec_())
